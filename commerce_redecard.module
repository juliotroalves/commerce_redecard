<?php

/**
 * @file
 * Provides payment method for Drupal Commerce for Redecard Brazilian 
 * payment gateway.
 *
 * @see http://www.redecard.com.br/
 * SCRIPT TO HELP IMPLEMENTS REDECARD PAYMENTS
 * http://forum.imasters.com.br/topic/294667-komerci-redecard/
 */

// Sets the web service URL.
define('COMMERCE_REDECARD_URL_WS', 'https://ecommerce.redecard.com.br/pos_virtual/confirma.asp');
define('COMMERCE_REDECARD_URL_CONF', 'https://ecommerce.redecard.com.br/pos_virtual/cupom.asp');

/**
 * Implements hook_menu().
 */
function commerce_redecard_menu() {
  $items = array();

  // Path to return data of the web server redecard.
  $items['commerce-redecard/notification'] = array(
    'page callback' => 'commerce_redecard_process_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Processes a notification request from Redecard.
 */
function commerce_redecard_process_notification() {

  /* If received a POST is a notification API request from Pagseguro. */
  if ($_SERVER['REQUEST_METHOD'] == 'GET') {

    /* Checks the kind of notification. */
    if (isset($_GET) && !empty($_GET)) {

      /* Cod, numpedido return of the Redecard with data of the transaction */
      $codret = (int) filter_input(INPUT_GET, 'CODRET', FILTER_SANITIZE_NUMBER_INT);
      $order_id = (int) filter_input(INPUT_GET, 'NUMPEDIDO', FILTER_SANITIZE_NUMBER_INT);
      $cv_cod = (string) $_GET['NUMCV'];
      $author_cod = (string) $_GET['NUMAUTOR'];
      $sqn_cod = (string) $_GET['NUMSQN'];

      // Loading order.
      $order = commerce_order_load($order_id);

      // Discard if order not loaded.
      if (!is_object($order)) {
        return '<h1>' . t('We have a error') . '</h1><p>' . t('Order not found. Please does other order.') . '</p>';
      }

      // Return status code message.
      $status_transaction = commerce_redecard_codret($codret);

      if (!$cv_cod || !$author_cod || !$sqn_cod) {
        watchdog(
          'commerce_redecard',
          'The request of transaction authorized was not completed successfully.',
          array(),
          WATCHDOG_ALERT
        );

        if ($status_transaction) {
          if (in_array($status_transaction['status_code'], array('institution_without_communication'))) {
            // Verify if email was already sent.
            if (!isset($_SESSION['notification_sent_to_adm'])) {
              // Send email to administrator of the payment-method.
              // @todo Set emails to adms.
              $adms = variable_get('site_mail');
              $resp = drupal_mail(
                'commerce_redecard_send_notifications_redecard',
                $status_transaction['status_code'],
                $adms,
                '',
                array(
                  'order' => $order,
                ),
                '',
                TRUE
              );
              if ($resp['send']) {
                $_SESSION['notification_sent_to_adm'] = TRUE;
              }
            }
            return "<h1>Parece que houve algo de errado!</h1><p>Ops, parece que ocorreu um erro na geração do seu pedido. Por favor, tente realizá-lo novamente ou entre em contato conosco.</p>";
          }
          // Verify if email was already sent.
          if (!isset($_SESSION['notification_sent_to_customer'])) {
            $resp = commerce_redecard_notify_user_order($order, $status_transaction['status_code']);
            if ($resp) {
              $_SESSION['notification_sent_to_customer'] = TRUE;
            }
          }
          return '<h1>Houve algo de errado</h1><p>' . $status_transaction['msg'] . '. Lhe enviamos um e-mail com mais informações.</p>';
        }

        return "<h1>Parece que houve algo de errado!</h1><p>Ops, parece que ocorreu um erro inesperado na geração do seu pedido. Por favor, tente realizá-lo novamente ou entre em contato conosco.</p>";
      }

      $data_cod = filter_input(INPUT_GET, 'DATA', FILTER_SANITIZE_NUMBER_INT);

      // Load payment method settings.
      $payment_method = commerce_payment_method_instance_load('redecard|commerce_payment_redecard');

      $order_total = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
      $order_payment_values = $order->data['commerce_redecard_options'];
      $amount_order = commerce_redecard_convert_currency($order_total);
      $trans_orig = $order_payment_values['payment_methods_card']['installments'] == '00' ? '04' : '06';

      // Prepares the URL variables.
      $params = '?DATA=' . $data_cod;
      $params .= '&TRANSACAO=203';
      $params .= '&TRANSORIG=' . $trans_orig;
      $params .= '&PARCELAS=' . $order_payment_values['payment_methods_card']['installments'];
      $params .= '&FILIACAO=' . $payment_method['settings']['filiation'];
      $params .= '&TOTAL=' . $amount_order;
      $params .= '&NUMPEDIDO=' . $order_id;
      $params .= '&NUMAUTOR=' . $author_cod;
      $params .= '&NUMCV=' . $cv_cod;
      $params .= '&NUMSQN=' . $sqn_cod;

      $response = drupal_http_request(COMMERCE_REDECARD_URL_WS . $params, array('method' => 'POST'));
      parse_str($response->data, $vars_response);
      $codret_final = intval($vars_response["CODRET"]);
      $msgret_final = $vars_response["MSGRET"];

      // Return transaction status code and message.
      $status_transaction = commerce_redecard_codret($codret_final);

      if ($payment_method['settings']['log_debug_info'] == TRUE) {
        watchdog('commerce_redecard', print_r($_GET, TRUE), array(), WATCHDOG_DEBUG);
        watchdog('commerce_redecard', print_r($response, TRUE), array(), WATCHDOG_DEBUG);
      }

      // Create a transaction for this last request for status transaction.
      commerce_redecard_payment_transaction($payment_method, $order_id, $order_total, $status_transaction);

      // Deading session variables that.
      if (isset($_SESSION['notification_sent_to_customer'])) {
        unset($_SESSION['notification_sent_to_customer']);
      }

      if (isset($_SESSION['notification_sent_to_adm'])) {
        unset($_SESSION['notification_sent_to_adm']);
      }

      switch ($codret_final) {
        case 0:
          $params = array(
            'DATA' => $data_cod,
            'NUMAUTOR' => $author_cod,
            'NUMCV' => $cv_cod,
          );
          _commerce_redecard_transaction_approved($order, $params);
          break;

        case 1:
          _commerce_redecard_transaction_confirmed($order);
          break;

        case 2:
          _commerce_redecard_transaction_denied($order);
          break;

        case 3:
          _commerce_redecard_transaction_undone($order);
          break;

        case 4:
        case 5:
          _commerce_redecard_transaction_reversed($order);
          break;

        case 8:
          _commerce_redecard_transaction_data_error($order);
          break;

        case 9:
          _commerce_redecard_transaction_not_found($order);
          break;

        case 88:
          _commerce_redecard_transaction_missing_data($order);
          break;

      }
    }
  }
}

/**
 * Functions process from web server RedeCard with your respective status.
 *
 * _commerce_redecard_transaction_approved():
 *   implements to transactions approved.
 * _commerce_redecard_transaction_confirmed(): conformes transactions approved.
 * _commerce_redecard_transaction_denied():
 *   implements transactions denied by authorizer.
 * _commerce_redecard_transaction_undone():
 *   implements transactions undone by time limit exceeded.
 * _commerce_redecard_transaction_reversed():
 *   implements to transactions reversed by customer or institution of payment.
 * _commerce_redecard_transaction_data_error():
 *   implements to transactions approved.
 * _commerce_redecard_transaction_not_found():
 *   implements to transactions approved.
 * _commerce_redecard_transaction_missing_data():
 *   implements to transactions approved.
 */
function _commerce_redecard_transaction_approved(&$order, $params) {
  $order->data['commerce_redecard_options']['transaction_data'] = $params;
  commerce_order_status_update($order, 'completed');
  drupal_goto('checkout/' . $order->order_number . '/complete');
}

/**
 * Implements custom function _commerce_redecard_transaction_confirmed.
 */
function _commerce_redecard_transaction_confirmed(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'already_approved');
}

/**
 * Implements custom function _commerce_redecard_transaction_denied.
 */
function _commerce_redecard_transaction_denied(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'denied_transaction');
}

/**
 * Implements custom function _commerce_redecard_transaction_undone.
 */
function _commerce_redecard_transaction_undone(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'undone_transaction');
}

/**
 * Implements custom function _commerce_redecard_transaction_reversed.
 */
function _commerce_redecard_transaction_reversed(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'reversed_transaction');
}

/**
 * Implements custom function _commerce_redecard_transaction_data_error.
 */
function _commerce_redecard_transaction_data_error(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'error_data');
}

/**
 * Implements custom function _commerce_redecard_transaction_not_found.
 */
function _commerce_redecard_transaction_not_found(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'notfound_transaction');
}

/**
 * Implements custom function _commerce_redecard_transaction_missing_data.
 */
function _commerce_redecard_transaction_missing_data(&$order) {
  // Send e-mail contacting customer and admin.
  commerce_redecard_notify_user_order($order, 'missing_data_transaction');
}

/**
 * This function send email to customer that no have payment approved.
 */
function commerce_redecard_notify_user_order(&$order, $key_mail) {
  // @todo send email to adm site also.
  $resp = drupal_mail('commerce_redecard_send_notifications_redecard', $key_mail, $order->mail, '', array('order' => $order), '', TRUE);
  return $resp['send'];
}

/**
 * Custom function to get data of order such as line items.
 */
function _commerce_redecard_order_data_get(&$order, &$variables) {
  // Loading user data.
  $user = user_load($order->uid);
  $username = $user->name;
  $line_items_id = $order->commerce_line_items[LANGUAGE_NONE];

  $items_name = '';

  foreach ($line_items_id as $value) {
    $line_items = commerce_line_item_load($value['line_item_id']);

    if ($line_items->type == 'commerce_product') {
      $product_id = $line_items->commerce_product[LANGUAGE_NONE][0]['product_id'];

      $product = commerce_product_load($product_id);
      $price = $product->commerce_price[LANGUAGE_NONE][0]['amount'];
      $price_formatted = number_format(abs(commerce_currency_amount_to_decimal($price, 'BRL')), 2, ',', '.');
      $items_name .= '<p class="product-line-item">' . $product->title . ' - R$ ' . $price_formatted . '</p>';

      unset($line_items, $product);
    }
  }
  $total_order = number_format(
    abs(
      commerce_currency_amount_to_decimal(
        $order->commerce_order_total[LANGUAGE_NONE][0]['amount'],
        'BRL'
      )
    ),
    2,
    ',',
    '.'
  );

  $variables += array(
    '@username' => $username,
    '@usermail' => $order->mail,
    '@order_number' => $order->order_number,
    '@order_total_value' => 'R$ ' . $total_order,
    '!line_items' => $items_name,
  );
}

/**
 * Callback function used in drupal_mail() to alter body and title of the email.
 */
function commerce_redecard_send_notifications_redecard_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $variables = array();
  $order = $params['order'];

  // Load payment method settings.
  $payment_method = commerce_payment_method_instance_load('redecard|commerce_payment_redecard');

  $statuses = _commerce_redecard_statuses($key);
  $variables['@message_status'] = $statuses ? $statuses['msg'] : '';
  $content = $payment_method['settings']['templates_email']['failure']['value'];

  switch ($key) {
    case 'missing_data_transaction':
      $message['subject'] = 'Dados Ausentes no Pagamento RedeCard';
      break;

    case 'notfound_transaction':
      $message['subject'] = 'Transação não encontrada no Pagamento RedeCard';
      break;

    case 'error_data':
      $message['subject'] = 'Dados não coincidem no Pagamento RedeCard';
      break;

    case 'reversed_transaction':
      $message['subject'] = 'Transação foi Estornada no Pagamento RedeCard';
      $content = $payment_method['settings']['templates_email']['reversed']['value'];
      break;

    case 'undone_transaction':
      $message['subject'] = 'Transação Desfeita no Pagamento RedeCard';
      break;

    case 'denied_transaction':
      $message['subject'] = 'Transação Negada no Pagamento RedeCard';
      break;

    case 'already_approved':
      $message['subject'] = 'Transação Já Confirmada no Pagamento RedeCard';
      $content = 'A transação já foi confirmada anteriormente; <br /> n° do pedido: <b>@order_number</b>';
      break;

    case 'unauthorized':
      $message['subject'] = 'Transação Não Autorizada';
      break;

    case 'invalid_foundation':
      $message['subject'] = 'Estabelecimento Inválido';
      break;

    case 'invalid_transaction':
      $message['subject'] = 'Transação Inválida';
      break;

    case 'redo_transaction':
      $message['subject'] = 'Refaça sua Transação';
      break;

    case 'error_card':
      $message['subject'] = 'Problemas com o Cartão';
      break;

    case 'invalid_data':
      $message['subject'] = 'Dado Inválido';
      break;

    case 'institution_without_communication':
      $message['subject'] = 'Urgente! Instituição sem Comunicação';
      break;

    case 'error_bank':
      $message['subject'] = 'Banco não pertence à Rede';
      break;
  }

  // Fill array variables with token.
  _commerce_redecard_order_data_get($order, $variables);

  // Send $content to body of email.
  $message['body'][] = format_string($content, $variables);

  unset($order);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_redecard_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['redecard'] = array(
    'base' => 'commerce_redecard',
    'title' => t('RedeCard (Cartões de Crédito)'),
    'short_title' => t('RedeCard'),
    'description' => t('RedeCard Integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_redecard_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'filiation' => '',
    'distributor' => '',
    'urlback' => '',
    'target' => '_top',
    'urlbanner' => '',
    'urlfooter' => '',
    'avs' => '',
    'log_debug_info' => '',
    'templates_email' => array(
      'success' => array(
        'value' => '',
      ),
      'failure' => array(
        'value' => '',
      ),
      'reversed' => array(
        'value' => '',
      ),
    ),
  );

  $form['filiation'] = array(
    '#type' => 'textfield',
    '#title' => t('Filiation'),
    '#description' => t('Types here the number filiation.'),
    '#default_value' => $settings['filiation'],
    '#required' => TRUE,
  );

  $form['distributor'] = array(
    '#type' => 'textfield',
    '#title' => t('distributor'),
    '#description' => t('Types here the number of distributor.'),
    '#default_value' => $settings['distributor'],
    '#required' => FALSE,
  );

  $form['urlback'] = array(
    '#type' => 'textfield',
    '#title' => t('Url Return'),
    '#description' => t('Url path that receive data from Redecard webservice.'),
    '#default_value' => $settings['urlback'],
    '#required' => TRUE,
  );

  $form['urlbanner'] = array(
    '#type' => 'textfield',
    '#title' => t('Url Banner'),
    '#description' => t('Url path to Banner that top of the site of the card.'),
    '#default_value' => $settings['urlbanner'],
    '#required' => TRUE,
  );

  $form['urlfooter'] = array(
    '#type' => 'textfield',
    '#title' => t('Url Footer'),
    '#description' => t('Url path to image that is footer of the site of the card.'),
    '#default_value' => $settings['urlfooter'],
    '#required' => FALSE,
  );

  $form['target'] = array(
    '#type' => 'textfield',
    '#title' => t('Url Target'),
    '#description' => t('This field is optional. It can have the name of the iframe to where the RedeCard return URL RETURN. Default is target="_top".'),
    '#default_value' => $settings['target'],
    '#required' => FALSE,
  );

  $form['avs'] = array(
    '#type' => 'checkbox',
    '#title' => t('AVS'),
    '#default_value' => $settings['avs'],
    '#description' => t('Check this box if you want AVS service.'),
  );

  $form['log_debug_info'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log debug information'),
    '#description' => t('Log info about notifications. PS: Check this box just into development environment'),
    '#default_value' => $settings['log_debug_info'],
  );

  $form['templates_email'] = array(
    '#type' => 'fieldset',
    '#title' => 'Templates de E-mail',
    '#collapsible' => TRUE,
  );

  $form['templates_email']['success'] = array(
    '#type' => 'text_format',
    '#title' => t('Success Email'),
    '#default_value' => $settings['templates_email']['success']['value'],
    '#description' => t('This field supports html format and plain text. You can use following token: @username, @usermail, @order_number, @order_total_value, !line_items, @message_status'),
  );

  $form['templates_email']['failure'] = array(
    '#type' => 'text_format',
    '#title' => t('Failure Email'),
    '#default_value' => $settings['templates_email']['failure']['value'],
    '#description' => t('This field supports html format and plain text. You can use following token: @username, @usermail, @order_number, @order_total_value, !line_items, @message_status'),
  );

  $form['templates_email']['reversed'] = array(
    '#type' => 'text_format',
    '#title' => t('Reversed Email'),
    '#default_value' => $settings['templates_email']['reversed']['value'],
    '#description' => t('This field supports html format and plain text. You can use following token: @username, @usermail, @order_number, @order_total_value, !line_items, @message_status'),
  );

  return $form;
}

/**
 * Builds a RedeCard HTML Integration form from an order object.
 */
function commerce_redecard_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $payment_method['settings'];

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($settings['urlback']) || empty($settings['urlbanner'])) {
    drupal_set_message(
      t('RedeCard Integration is not configured for use. You can ')
        . l(
            t('access Redecard Payment Method configuration'),
            'admin/commerce/config/payment-methods/manage/commerce_payment_redecard'
          )
        . t(' to do it now.'),
      'error'
    );
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Send everything as a single item.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $order_total_value = commerce_redecard_convert_currency($order_total);
  $hidden_fields = array(
    // Drupal Commerce uses integer value while RedeCard prefers a decimal.
    'TOTAL' => $order_total_value,
    'FILIACAO' => $settings['filiation'],
    'DISTRIBUIDOR' => $settings['distributor'],
    'NUMPEDIDO' => $order->order_number,
    'CODVER' => commerce_redecard_RedeCard_CodVer($settings['filiation'], $order_total_value, ip_address()),
    'URLBACK' => $settings['urlback'],
    'URLCIMA' => $settings['urlbanner'],
    'URLBAIXO' => $settings['urlfooter'],
    'TARGET' => $settings['target'],
    'LANGUAGE' => 'POR',
  );

  if ($settings['avs']) {
    $hidden_fields['AVS'] = 'S';
  }

  if (!empty($order->data['commerce_redecard_options'])) {
    $data = $order->data['commerce_redecard_options'];
    $hidden_fields += array(
      'TRANSACAO' =>
      $data['payment_methods_card']['installments'] == '00' ? '04' : '06',
      'PARCELAS' => $data['payment_methods_card']['installments'],
      // MASTERCARD, DINERS, VISA.
      'BANDEIRA' => $data['payment_methods_card']['cards'],
    );
  }

  // Path where datas will be send.
  $form['#action'] = 'https://ecommerce.redecard.com.br/pos_virtual/form_card.asp';

  // Create hidden fields.
  foreach ($hidden_fields as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  // @todo Make it possible to choose which image to use for the button.
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Clique aqui para realizar seu Pagamento'),
    '#attributes' => array('class' => array('super-button')),
  );

  commerce_order_status_update($order, 'pending');

  return $form;
}

/**
 * Payment callback: adds a message and CSS to the submission form.
 */
function commerce_redecard_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $base = base_path() . drupal_get_path('module', 'commerce_redecard') . '/';
  $forms_payment = array(
    'MASTERCARD' => '<img src="' . $base . 'images/mastercard.png" width="100" />',
    'DINERS' => '<img src="' . $base . 'images/diners.png" width="100" />',
    'VISA' => '<img src="' . $base . 'images/visa.png" width="100" />',
  );

  $form['payment_methods_card'] = array(
    '#type' => 'fieldset',
    '#title' => '<h3>' . t('Forma de Pagamento') . '</h3>',
    '#collapsible' => FALSE,
  );

  $form['payment_methods_card']['cards'] = array(
    '#type' => 'radios',
    '#title' => '',
    '#options' => $forms_payment,
    '#prefix' => '<div class="cards payment-forms">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#attributes' => array('class' => array('flag-card')),
  );

  $form['payment_methods_card']['installments'] = array(
    '#type' => 'select',
    '#title' => t('N° de Parcelas'),
    '#options' => array(
      '00' => 1,
      '02' => 2,
      '03' => 3,
      '04' => 4,
      '05' => 5,
      '06' => 6,
    ),
  );

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_redecard_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (empty($pane_values['payment_methods_card']['cards'])) {
    form_set_error('cards', t('Please select a card of credit that you wish to pay.'));
  }
}

/**
 * Payment method callback: checkout form submission.
 *
 * Display an error and prevent the payment attempt if RedeCard has not been
 * configured yet.
 */
function commerce_redecard_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }

  $order->data['commerce_redecard_options'] = $pane_values;

  return $order;
}

/**
 * Custom function that calculates cod of the RedeCard.
 */
function commerce_redecard_RedeCard_CodVer($number_filiation, $total, $ip) {
  $date = getdate();
  $seconds_now = $date['seconds'];

  /* esta é uma tabelinha de codificação da própria redecard, onde eles embaralham os segundos. NÃO ALTERAR! */
  $encodes = array(
    11,17,21,31,56,34,42,3,18,13,
    12,18,22,32,57,35,43,4,19,14,
    9,20,23,33,58,36,44,5,24,15,62,
    25,34,59,37,45,6,25,16,27,63,26,
    35,60,38,46,7,26,17,28,14,36,2,
    39,47,8,29,22,55,33,
  );

  $seconds_now = $encodes[$seconds_now];

  $pad = $seconds_now < 10 ? "0" : "";

  $tam_ip = strlen($ip);
  $total = intval($total);
  $numfil = intval($number_filiation);
  $i5 = $total + $seconds_now;
  $i6 = $seconds_now + $tam_ip;
  $i7 = $seconds_now * $numfil;
  $i8 = strlen($i7);
  return "$i7$i5$i6-$i8$pad$seconds_now";
}

/**
 * Return a list of payment statuses, or an specific payment status message.
 *
 * $codret: The status identification in which to return the message.
 */
function commerce_redecard_codret($codret = NULL) {
  $codes = array(
    'approved' => array(0),
    'already_approved' => array(1),
    'denied_transaction' => array(2),
    'undone_transaction' => array(3),
    'reversed_transaction' => array(4,5),
    'error_data' => array(8),
    'notfound_transaction' => array(9),
    'missing_data_transaction' => array(88),
    'unauthorized' => array(
      50, 52, 54, 55, 57,
      59, 61, 62, 64, 66,
      67, 68, 70, 71, 73,
      75, 78, 79, 80, 82,
      83, 84, 85, 87, 89,
      90, 91, 93, 94, 95,
      97, 99,
    ),
    'invalid_foundation' => array(51, 92, 98),
    'invalid_transaction' => array(53),
    'redo_transaction' => array(76, 86),
    'error_card' => array(58, 63, 65, 69, 72, 77, 96),
    'invalid_data' => array(56, 60),
    'institution_without_communication' => array(74),
    'error_bank' => array(81),
  );

  foreach ($codes as $key => $value) {
    if (in_array($codret, $value, TRUE)) {
      return _commerce_redecard_statuses($key);
    }
  }

  return FALSE;
}

/**
 * Custom function: implements status of transactions payment.
 */
function _commerce_redecard_statuses($codkey = NULL) {
  $codes_messages = array(
    'approved' => array(
      'msg' => t('Transação Aprovada. A transação foi autorizada com sucesso.'),
      'status' => COMMERCE_PAYMENT_STATUS_SUCCESS,
    ),
    'already_approved' => array(
      'msg' => t('A transação já foi aprovada.'),
      'status' => COMMERCE_PAYMENT_STATUS_SUCCESS,
    ),
    'denied_transaction' => array(
      'msg' => t('A transação não foi autorizada pelo Autorizador.'),
      'status' => COMMERCE_PAYMENT_STATUS_PENDING,
    ),
    'undone_transaction' => array(
      'msg' => t('A transação foi desfeita porque o tempo limite de confirmação foi excedido.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'reversed_transaction' => array(
      'msg' => t('A transação foi estornada pelo processo de Estorno de Transação.'),
      'status' => COMMERCE_PAYMENT_STATUS_PENDING,
    ),
    'error_data' => array(
      'msg' => t('Existem dados que não coincidem. Dados de Total e Número do Pedido não conferem com o Número de Comprovante e Autorização.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'notfound_transaction' => array(
      'msg' => t('Não foi encontrada nenhuma transação para os respectivos campos: NUMCV, NUMAUTOR, DATA'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'missing_data_transaction' => array(
      'msg' => t('Dados Ausentes. Transação não pode ser concluida. Algum dado obrigatório não foi informado.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'unauthorized' => array(
      'msg' => t('A transação não foi autorizada e não poderá ser seguida pela etapa de Confirmação.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'invalid_foundation' => array(
      'msg' => t('Estabelecimento Inválido. Por favor contacte o estabelecimento que está efetuando a venda.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'invalid_transaction' => array(
      'msg' => t('Transação Inválida. Por favor, contacte sua instituição para mais informações.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'redo_transaction' => array(
      'msg' => t('Refaça a Transação. Ocorreram problemas na respectiva autorização e esta deverá ser enviada novamente.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'error_card' => array(
      'msg' => t('Problemas com os dados do Cartão. Por favor, verifique as informações do seu cartão. Caso o erro persista contacte a Central de Atendimento do seu Cartão de Crédito.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'invalid_data' => array(
      'msg' => t('Dados inválidos. Ocorre quando campos de Total, Transação, Parcelas, Bandeira, dentre outros, estão vazios ou incorretos. Por favor contacte seu vendedor.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'institution_without_communication' => array(
      'msg' => t('Instituição sem comunicação.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
    'error_bank' => array(
      'msg' => t('O banco não pertence à rede.'),
      'status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    ),
  );

  if (!empty($codkey) && isset($codes_messages[$codkey])) {
    return $response = array(
      'status_code' => $codkey,
      'msg' => $codes_messages[$codkey]['msg'],
      'status' => $codes_messages[$codkey]['status'],
    );
  }

  return FALSE;
}

/**
 * Creates an payment transaction for the specified charge amount.
 */
function commerce_redecard_payment_transaction($payment_method, $order_id, $order_total, $status_transaction) {
  if (!$status_transaction) {
    return;
  }
  $transaction = commerce_payment_transaction_new('redecard', $order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_total;
  $transaction->currency_code = 'BRL';
  $transaction->status = $status_transaction['status'];
  $transaction->payload[REQUEST_TIME] = $_GET;
  $transaction->message = '@msg';
  $transaction->message_variables = array('@msg' => $status_transaction['msg']);

  commerce_payment_transaction_save($transaction);
}

/**
 * Custom function to convert currency.
 */
function commerce_redecard_convert_currency($order_total) {
  return number_format($order_total / 100, 2, '.', '');
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_redecard_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['checkout_completion_message'] += array(
    'callbacks' => array('checkout_form' => 'commerce_redecard_completion_message_pane_checkout_form'),
  );
}

/**
 * Checkout pane callback: Wraps the completion message with a custom div.
 */
function commerce_redecard_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  // Build the original message pane.
  $pane_form = commerce_checkout_completion_message_pane_checkout_form($form, $form_state, $checkout_pane, $order);

  if ($order->data['payment_method'] == 'redecard|commerce_payment_redecard') {
    if (isset($order->data['commerce_redecard_options']['transaction_data'])) {
      $data_trans = $order->data['commerce_redecard_options']['transaction_data'];
      $params = '?DATA=' . $data_trans['DATA'] . '&TRANSACAO=201' . '&NUMAUTOR=' . $data_trans['NUMAUTOR'] . '&NUMCV=' . $data_trans['NUMCV'] . '&LANGUAGE=POR';
      drupal_add_js(array('commerce_redecard' => array('print_path' => COMMERCE_REDECARD_URL_CONF . $params)), 'setting');
      drupal_add_js(drupal_get_path('module', 'commerce_redecard') . '/js/print_cupom.js', 'file');
      // Add and extra div.
      $form = array();
      $form['print_cupom'] = array(
        '#type' => 'button',
        '#value' => t('Clique para visualizar o seu Comprovante'),
        '#attributes' => array('class' => array('super-button'), 'onclick' => 'print_cupom();return false'),
      );

      $pane_form['commerce_print_cupom'] = array(
        '#markup' => '<div class="commerce-redecard-cupom">' . render($form) . '</div>',
        '#weight' => -10,
      );
    }
    else {
      drupal_goto('payment-again/' . $order->order_number);
    }
  }
  return $pane_form;
}
